# POSTS_GUIDE.md
The Rails application includes a blog post management system accessible only to users with 'Pirate' or 'Privateer' roles.
The 'posts' table in the database includes the fields: 'id', 'title', 'content', 'author', 'published_at', 'created_at', and 'updated_at'.
The 'title' field in the 'posts' table is required and has a maximum length of 255 characters.
The 'content' field in the 'posts' table is required and uses a text field.
The 'author' field in the 'posts' table is required.
The 'published_at' field in the 'posts' table is nullable and stores the publication timestamp.
The application provides a full CRUD interface for managing blog posts.
Posts are saved as drafts by default, with no 'published_at' date set.
Published posts include a publication date stored in the 'published_at' field.
The application includes a publishing system where posts can be published or reverted to draft status.
The application does not implement soft deletion; post deletions are permanent.
The Post model includes validations for the presence of 'title', 'content', and 'author'.
The Post model includes a validation for 'title' length, with a maximum of 255 characters.
The Post model defines a 'published' scope to filter posts with a non-null 'published_at' field.
The Post model defines a 'recent' scope to order posts by 'created_at' in descending order.
The Post model includes instance methods: 'published?' to check publication status, 'publish!' to publish a post, and 'unpublish!' to revert a post to draft.
The application uses RESTful routes for posts, with additional custom member actions for publishing and unpublishing.
The RESTful routes for posts include: 'GET /posts', 'GET /posts/:id', 'GET /posts/new', 'POST /posts', 'GET /posts/:id/edit', 'PATCH /posts/:id', and 'DELETE /posts/:id'.
Custom member routes include: 'PATCH /posts/:id/publish' to publish a post and 'PATCH /posts/:id/unpublish' to unpublish a post.
The application includes a responsive design with visual indicators for published and draft posts.
Form validation prevents empty required fields during post creation and editing.
The application includes confirmation dialogs for destructive actions like post deletion.
Sample data includes a welcome post, a Rails tutorial post, and a draft post example.
Sample data can be reset using the 'rails db:seed' command.
The file structure includes 'post.rb' for the Post model, 'posts_controller.rb' for CRUD and publish actions, and views for listing, showing, creating, and editing posts.
The 'routes.rb' file defines RESTful routes and custom actions for posts.
Future enhancements for the posts feature could include user authentication, categories, tags, rich text editing, image uploads, comments, SEO-friendly URLs, post scheduling, and search functionality.
