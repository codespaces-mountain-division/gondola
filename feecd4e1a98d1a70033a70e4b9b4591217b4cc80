# POSTS_GUIDE.md
The Rails application includes a blog post management system accessible only to users with 'Pirate' or 'Privateer' roles.
The posts feature provides a full CRUD interface for blog post management, including publishing capabilities.
The `posts` table in the database schema includes the fields: `id`, `title`, `content`, `author`, `published_at`, `created_at`, and `updated_at`.
The `title` field in the `posts` table is required and has a maximum length of 255 characters.
The `content` field in the `posts` table is required and uses a text data type.
The `author` field in the `posts` table is required.
The `published_at` field in the `posts` table is nullable and stores the publication timestamp.
Posts are saved as drafts by default, with no `published_at` value set.
Published posts include a publication date stored in the `published_at` field.
The application uses RESTful routes for posts, with additional custom member actions for publishing and unpublishing posts.
The following RESTful routes are available for posts: `GET /posts`, `GET /posts/:id`, `GET /posts/new`, `POST /posts`, `GET /posts/:id/edit`, `PATCH /posts/:id`, `DELETE /posts/:id`.
Custom member routes include `PATCH /posts/:id/publish` for publishing posts and `PATCH /posts/:id/unpublish` for unpublishing posts.
The `Post` model includes validations for the presence of `title`, `content`, and `author` fields, and a maximum length of 255 characters for the `title` field.
The `Post` model includes the scope `published`, which filters posts with a non-null `published_at` field.
The `Post` model includes the scope `recent`, which orders posts by the `created_at` field in descending order.
The `Post` model includes instance methods `published?`, `publish!`, and `unpublish!` for checking publication status and changing it.
The application includes a responsive design with embedded CSS and visual indicators for published and draft posts.
Form validation is implemented to prevent empty required fields during post creation and editing.
The application does not implement soft deletion; post deletions are permanent.
The application includes seed data with example posts, including a welcome post, a Rails tutorial post, and a draft post.
Sample data can be reset using the `rails db:seed` command.
The file structure includes `post.rb` in `app/models/`, `posts_controller.rb` in `app/controllers/`, and views for posts in `app/views/posts/`.
The `posts_controller.rb` file implements full CRUD functionality and custom actions for publishing and unpublishing posts.
The `routes.rb` file defines RESTful routes for posts and custom member actions for publishing and unpublishing.
Future enhancements for the posts feature could include user authentication, categories, tags, rich text editing, image uploads, comments, SEO-friendly URLs, post scheduling, and search functionality.
